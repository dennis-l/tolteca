# vim: ts=2 sw=2
openapi: 3.0.0
info:
  title: TolTECA Web API
  description: |
    This defines the API for the TolTECA web application.
  contact:
    name: Zhiyuan Ma
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  version: 0.1.0
servers:
# - url: https://virtserver.swaggerhub.com/Jerry-Ma/TolTECA/0.1.0
#   description: SwaggerHub API Auto Mocking
- url: /api
  description: The API base url
tags:
- name: auth
  description: Authentication
- name: user
  description: User related operations
paths:
  /auth/{userId}:
    get:
      tags:
      - auth
      summary: Return a JWT token for API access
      parameters:
      - name: userId
        in: path
        description: User unique Identifier
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
        example: 42
      responses:
        "200":
          description: A JWT token for API access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtToken'
        "400":
          description: Invalid user ID
        "401":
          description: Authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /has_api_access:
    get:
      tags:
      - auth
      summary: Return True if user has API access
      responses:
        "200":
          description: User has API access
          content:
            application/json:
              schema:
                type: boolean
                x-content-type: application/json
              example: true
        default:
          description: User does not have API access
          content:
            application/json:
              schema:
                type: boolean
                x-content-type: application/json
              example: false
              # security:
              # - jwt:
              # - read:has_api_access
  # /user:
  #   post:
  #     tags:
  #     - user
  #     summary: Create user
  #     description: This can only be done by the logged in user.
  #     requestBody:
  #       description: Created user object
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #       required: true
  #     responses:
  #       default:
  #         description: successful operation
  # /user/createWithArray:
  #   post:
  #     tags:
  #     - user
  #     summary: Creates list of users with given input array
  #     requestBody:
  #       $ref: '#/components/requestBodies/UserArray'
  #     responses:
  #       default:
  #         description: successful operation
  #     x-openapi-router-controller: swagger_server.controllers.user_controller
  # /user/createWithList:
  #   post:
  #     tags:
  #     - user
  #     summary: Creates list of users with given input array
  #     requestBody:
  #       $ref: '#/components/requestBodies/UserArray'
  #     responses:
  #       default:
  #         description: successful operation
  #     x-openapi-router-controller: swagger_server.controllers.user_controller
  # /user/login:
  #   get:
  #     tags:
  #     - user
  #     summary: Logs user into the system
  #     parameters:
  #     - name: username
  #       in: query
  #       description: The user name for login
  #       required: true
  #       style: form
  #       explode: true
  #       schema:
  #         type: string
  #     - name: password
  #       in: query
  #       description: The password for login in clear text
  #       required: true
  #       style: form
  #       explode: true
  #       schema:
  #         type: string
  #     responses:
  #       "200":
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             style: simple
  #             explode: false
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             style: simple
  #             explode: false
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #               x-content-type: application/json
  #           application/xml:
  #             schema:
  #               type: string
  #       "400":
  #         description: Invalid username/password supplied
  # /user/logout:
  #   get:
  #     tags:
  #     - user
  #     summary: Logs out current logged in user session
  #     responses:
  #       default:
  #         description: successful operation
  # /user/{username}:
  #   get:
  #     tags:
  #     - user
  #     summary: Get user by user name
  #     parameters:
  #     - name: username
  #       in: path
  #       description: The name that needs to be fetched. Use user1 for testing.
  #       required: true
  #       style: simple
  #       explode: false
  #       schema:
  #         type: string
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       "400":
  #         description: Invalid username supplied
  #       "404":
  #         description: User not found
  #   put:
  #     tags:
  #     - user
  #     summary: Updated user
  #     description: This can only be done by the logged in user.
  #     parameters:
  #     - name: username
  #       in: path
  #       description: name that need to be updated
  #       required: true
  #       style: simple
  #       explode: false
  #       schema:
  #         type: string
  #     requestBody:
  #       description: Updated user object
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #       required: true
  #     responses:
  #       "400":
  #         description: Invalid user supplied
  #       "404":
  #         description: User not found
  #   delete:
  #     tags:
  #     - user
  #     summary: Delete user
  #     description: This can only be done by the logged in user.
  #     parameters:
  #     - name: username
  #       in: path
  #       description: The name that needs to be deleted
  #       required: true
  #       style: simple
  #       explode: false
  #       schema:
  #         type: string
  #     responses:
  #       "400":
  #         description: Invalid username supplied
  #       "404":
  #         description: User not found
components:
  schemas:
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    JwtToken:
      type: string
      example: abcdefghijklmnopqrstuvwxyz
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      xml:
        name: User
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authorization information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: app.decode_token
